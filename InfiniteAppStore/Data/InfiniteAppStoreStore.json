{"programs":{"EFECD4AA-8E9F-4403-9E54-3683EB02A169":{"llmEnabled":true,"html":"<div class='photobooth-container'> <div class='camera-view'> <video id='video' autoplay><\/video> <\/div> <div class='controls'> <button id='capture-button'>Capture<\/button> <button id='save-button'>Save<\/button> <\/div> <div class='photo-view'> <canvas id='canvas'><\/canvas> <\/div> <\/div>","css":".photobooth-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; } .camera-view, .photo-view { width: 100%; max-width: 320px; aspect-ratio: 4 \/ 3; box-shadow: var(--border-raised-outer), var(--border-raised-inner); margin-bottom: var(--element-spacing); } .controls { display: flex; gap: var(--element-spacing); margin-bottom: var(--element-spacing); } video, canvas { filter: grayscale(100%); width: 100%; height: 100%; }","applescriptEnabled":false,"id":"EFECD4AA-8E9F-4403-9E54-3683EB02A169","title":"Photobooth","subtitle":"","iconName":"camera","colorHex":"0000ff","js":"const video = document.getElementById('video'); const canvas = document.getElementById('canvas'); const captureButton = document.getElementById('capture-button'); const saveButton = document.getElementById('save-button'); navigator.mediaDevices.getUserMedia({ video: true }).then(stream => { video.srcObject = stream; }); captureButton.addEventListener('click', () => { const context = canvas.getContext('2d'); context.drawImage(video, 0, 0, canvas.width, canvas.height); }); saveButton.addEventListener('click', () => { const dataURL = canvas.toDataURL('image\/png'); const link = document.createElement('a'); link.href = dataURL; link.download = 'photo.png'; link.click(); });"},"DD486691-75B3-4FBD-86F5-D7BE8044AF54":{"subtitle":"Let me fling a bouncy ball across the screen. simulate physics so that it bounces off walls of the window.","css":"#container { width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; } #canvas { border: 1px solid var(--window-frame); background: var(--button-face); }","title":"Bouncy Ball","id":"DD486691-75B3-4FBD-86F5-D7BE8044AF54","html":"<div id='container'><canvas id='canvas'><\/canvas><\/div>","llmEnabled":true,"iconName":"joystick","applescriptEnabled":false,"colorHex":"0000ff","js":"const canvas = document.getElementById('canvas'); const ctx = canvas.getContext('2d'); let ball = { x: 50, y: 50, radius: 30, dx: 0, dy: 0 }; let isDragging = false; let lastMousePos = { x: 0, y: 0 }; let throwVelocity = { dx: 0, dy: 0 }; const gravity = 0.1; const friction = 0.995; const elasticity = 0.8; function resizeCanvas() { canvas.width = window.innerWidth - 40; canvas.height = window.innerHeight - 40; } function drawBall() { ctx.beginPath(); ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2); ctx.fillStyle = 'red'; ctx.fill(); ctx.closePath(); } function updateBallPosition() { if (isDragging) return; ball.dy += gravity; ball.dx *= friction; ball.dy *= friction; ball.x += ball.dx; ball.y += ball.dy; if (ball.x + ball.radius > canvas.width || ball.x - ball.radius < 0) { ball.dx = -ball.dx * elasticity; ball.x = ball.x + ball.radius > canvas.width ? canvas.width - ball.radius : ball.radius; } if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) { ball.dy = -ball.dy * elasticity; ball.y = ball.y + ball.radius > canvas.height ? canvas.height - ball.radius : ball.radius; } } function draw() { ctx.clearRect(0, 0, canvas.width, canvas.height); drawBall(); updateBallPosition(); requestAnimationFrame(draw); } function getMousePos(canvas, evt) { var rect = canvas.getBoundingClientRect(); return { x: evt.clientX - rect.left, y: evt.clientY - rect.top }; } canvas.addEventListener('mousedown', (e) => { let pos = getMousePos(canvas, e); if (Math.sqrt((pos.x - ball.x) ** 2 + (pos.y - ball.y) ** 2) <= ball.radius) { isDragging = true; lastMousePos = pos; ball.dx = 0; ball.dy = 0; } }); canvas.addEventListener('mousemove', (e) => { if (isDragging) { let pos = getMousePos(canvas, e); ball.x = pos.x; ball.y = pos.y; throwVelocity.dx = (pos.x - lastMousePos.x) * 0.5; throwVelocity.dy = (pos.y - lastMousePos.y) * 0.5; lastMousePos = pos; } }); canvas.addEventListener('mouseup', () => { if (isDragging) { ball.dx = throwVelocity.dx; ball.dy = throwVelocity.dy; isDragging = false; } }); window.addEventListener('resize', resizeCanvas); resizeCanvas(); draw();"},"23B583A8-5FBB-4929-810A-775BF3715A18":{"llmEnabled":false,"applescriptEnabled":true,"subtitle":"Buttons to toggle dark mode or activate screensaver","css":".container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: var(--element-spacing);\n    padding: var(--element-spacing);\n}\n\nh1 {\n    margin-bottom: var(--element-spacing);\n}\n\nbutton {\n    min-width: 150px;\n}","html":"<div class='container'>\n    <h1>Control Center<\/h1>\n    <button id='toggle-dark-mode'>Toggle Dark Mode<\/button>\n    <button id='activate-screensaver'>Activate Screensaver<\/button>\n<\/div>","colorHex":"0000ff","id":"23B583A8-5FBB-4929-810A-775BF3715A18","iconName":"tools","js":"document.getElementById('toggle-dark-mode').addEventListener('click', async () => {\n    const script = `tell application \"System Events\"\n        tell appearance preferences\n            set dark mode to not dark mode\n        end tell\n    end tell`;\n    await appleScript(script, (result) => {\n        if (result === null) {\n            alert('Dark mode toggled successfully.');\n        } else {\n            alert('Failed to toggle dark mode: ' + result);\n        }\n    });\n});\n\ndocument.getElementById('activate-screensaver').addEventListener('click', async () => {\n    const script = `tell application \"System Events\" to start current screen saver`;\n    await appleScript(script, (result) => {\n        if (result === null) {\n            alert('Screensaver activated successfully.');\n        } else {\n            alert('Failed to activate screensaver: ' + result);\n        }\n    });\n});","title":"Control Center"},"3DCCFFB7-E5B5-4489-AAED-489268392EB6":{"id":"3DCCFFB7-E5B5-4489-AAED-489268392EB6","colorHex":"0000ff","html":"<div class='app-container'>\n    <div class='input-container'>\n        <input type='text' id='new-task' placeholder='Enter a new task'>\n        <button onclick='addTask()'>Add<\/button>\n    <\/div>\n    <div class='task-list-container'>\n        <ul id='task-list'><\/ul>\n        <div id='empty-state'>No tasks available<\/div>\n    <\/div>\n<\/div>","title":"Todo List","iconName":"note","applescriptEnabled":false,"subtitle":"Simple windows 98-style todo list. Make sure it's responsive to fit the size of the window.","llmEnabled":false,"css":".app-container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n}\n.input-container {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 10px;\n    width: 100%;\n}\n.input-container input {\n    flex-grow: 1;\n    margin-right: 10px;\n}\n.task-list-container {\n    flex-grow: 1;\n    overflow: auto;\n    width: 100%;\n}\n.task-list-container ul {\n    list-style: none;\n    padding: 0;\n}\n.task-list-container li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px;\n    background: var(--button-face);\n    margin-bottom: 5px;\n    box-shadow: var(--border-raised-outer), var(--border-raised-inner);\n}\n.task-list-container li span {\n    flex-grow: 1;\n    text-align: left;\n    margin-left: 10px;\n}\n.task-list-container li.completed {\n    opacity: 0.5;\n}\n.task-list-container li button {\n    margin-left: 10px;\n    background: none;\n    border: none;\n    padding: 0;\n}\n.task-list-container li button img {\n    width: 16px;\n    height: 16px;\n}\n#empty-state {\n    text-align: center;\n    display: none;\n    margin-top: 20px;\n}","js":"document.addEventListener('DOMContentLoaded', function() {\n    const taskInput = document.getElementById('new-task');\n    taskInput.addEventListener('keypress', function(event) {\n        if (event.key === 'Enter') {\n            addTask();\n        }\n    });\n    loadTasks();\n});\n\nfunction addTask() {\n    const taskInput = document.getElementById('new-task');\n    const taskText = taskInput.value.trim();\n    if (taskText === '') {\n        alert('Please enter a task.');\n        return;\n    }\n    const taskList = document.getElementById('task-list');\n    const newTask = document.createElement('li');\n    newTask.innerHTML = `<input type='checkbox' onchange='toggleTask(this)'> <span>${taskText}<\/span> <button onclick='removeTask(this)'><img src='\/icons\/recycle_bin.png' alt='Remove'><\/button>`;\n    taskList.appendChild(newTask);\n    taskInput.value = '';\n    saveTasks();\n}\n\nfunction toggleTask(checkbox) {\n    const task = checkbox.parentElement;\n    if (checkbox.checked) {\n        task.classList.add('completed');\n    } else {\n        task.classList.remove('completed');\n    }\n    saveTasks();\n    moveCompletedTasksToBottom();\n}\n\nfunction removeTask(button) {\n    const task = button.parentElement;\n    task.remove();\n    saveTasks();\n}\n\nfunction saveTasks() {\n    const taskList = document.getElementById('task-list');\n    const tasks = [];\n    for (let i = 0; i < taskList.children.length; i++) {\n        const taskElement = taskList.children[i];\n        const taskText = taskElement.querySelector('span').innerText;\n        const isCompleted = taskElement.classList.contains('completed');\n        tasks.push({ text: taskText, completed: isCompleted });\n    }\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    updateEmptyState();\n}\n\nfunction loadTasks() {\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const taskList = document.getElementById('task-list');\n    tasks.forEach(task => {\n        const taskElement = document.createElement('li');\n        taskElement.innerHTML = `<input type='checkbox' onchange='toggleTask(this)' ${task.completed ? 'checked' : ''}> <span>${task.text}<\/span> <button onclick='removeTask(this)'><img src='\/icons\/recycle_bin.png' alt='Remove'><\/button>`;\n        if (task.completed) {\n            taskElement.classList.add('completed');\n        }\n        taskList.appendChild(taskElement);\n    });\n    updateEmptyState();\n    moveCompletedTasksToBottom();\n}\n\nfunction updateEmptyState() {\n    const taskList = document.getElementById('task-list');\n    const emptyState = document.getElementById('empty-state');\n    if (taskList.children.length === 0) {\n        emptyState.style.display = 'block';\n    } else {\n        emptyState.style.display = 'none';\n    }\n}\n\nfunction moveCompletedTasksToBottom() {\n    const taskList = document.getElementById('task-list');\n    const completedTasks = Array.from(taskList.getElementsByClassName('completed'));\n    completedTasks.forEach(task => {\n        taskList.appendChild(task);\n    });\n}"}}}